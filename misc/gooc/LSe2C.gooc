#include "goolstdlib(2).gooc"
#include "smod_util.gooc"

// gooc -c2 -rpal LSe2C.gooc LSe2C.nsentry
// cba to comment all this

#gool LSe2C 44 5

#font FONT_SMALL [Cr2iT]
#char 0x000000 0 0 0 0 0 0 1 1 400 420 //  
#char 0x808080 0 1 1 0 608 16 16 16 400 0 // !
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // "
#char 0x808080 0 1 1 0 1008 64 16 16 400 0 // #
#char 0x808080 0 1 1 0 976 16 16 16 400 0 // $
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // %
#char 0x141414 0 1 7 10 136 12 4 4 400 0 // &
#char 0x808080 0 1 1 0 992 80 16 16 300 0 // '
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // (
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // )
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // *
#char 0x808080 0 1 1 0 1008 96 16 16 400 0 // +
#char 0x808080 0 1 1 0 992 64 16 16 300 0 // ,
#char 0x808080 0 1 1 0 992 112 16 16 400 0 // -
#char 0x808080 0 1 1 0 992 96 16 16 250 0 // .
#char 0x808080 0 1 4 0 832 96 32 32 470 0 // /
#char 0x808080 0 1 1 0 448 16 16 16 400 0 // 0
#char 0x808080 0 1 1 0 464 16 16 16 400 0 // 1
#char 0x808080 0 1 1 0 480 16 16 16 400 0 // 2
#char 0x808080 0 1 1 0 496 16 16 16 400 0 // 3
#char 0x808080 0 1 1 0 512 16 16 16 400 0 // 4
#char 0x808080 0 1 1 0 528 16 16 16 400 0 // 5
#char 0x808080 0 1 1 0 544 16 16 16 400 0 // 6
#char 0x808080 0 1 1 0 560 16 16 16 400 0 // 7
#char 0x808080 0 1 1 0 576 16 16 16 400 0 // 8
#char 0x808080 0 1 2 0 592 16 16 16 400 0 // 9
#char 0x808080 0 1 1 0 992 48 16 16 300 0 // :
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // ;
#char 0x808080 0 1 4 0 416 16 32 16 800 0 // <
#char 0x808080 0 3 3 0 416 8 8 8 400 0 // =
#char 0x808080 0 1 4 0 384 16 32 16 800 0 // >
#char 0x808080 0 1 1 0 992 32 16 16 400 0 // ?
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // @
#char 0x808080 0 1 1 0 624 16 16 16 400 0 // A
#char 0x808080 0 1 1 0 640 16 16 16 400 0 // B
#char 0x808080 0 1 1 0 656 16 16 16 400 0 // C
#char 0x808080 0 1 1 0 672 16 16 16 400 0 // D
#char 0x808080 0 1 1 0 688 16 16 16 400 0 // E
#char 0x808080 0 1 1 0 704 16 16 16 400 0 // F
#char 0x808080 0 1 1 0 720 16 16 16 400 0 // G
#char 0x808080 0 1 1 0 736 16 16 16 400 0 // H
#char 0x808080 0 1 1 0 752 16 16 16 400 0 // I
#char 0x808080 0 1 1 0 768 16 16 16 400 0 // J
#char 0x808080 0 1 1 0 784 16 16 16 400 0 // K
#char 0x808080 0 1 1 0 800 16 16 16 400 0 // L
#char 0x808080 0 1 1 0 816 16 16 16 400 0 // M
#char 0x808080 0 1 1 0 832 16 16 16 400 0 // N
#char 0x808080 0 1 1 0 848 16 16 16 400 0 // O
#char 0x808080 0 1 1 0 864 16 16 16 400 0 // P
#char 0x808080 0 1 1 0 880 16 16 16 400 0 // Q
#char 0x808080 0 1 1 0 896 16 16 16 400 0 // R
#char 0x808080 0 1 1 0 912 16 16 16 400 0 // S
#char 0x808080 0 1 1 0 928 16 16 16 400 0 // T
#char 0x808080 0 1 1 0 944 16 16 16 400 0 // U
#char 0x808080 0 1 1 0 960 48 16 16 400 0 // V
#char 0x808080 0 1 1 0 960 32 16 16 400 0 // W
#char 0x808080 0 1 1 0 960 16 16 16 400 0 // X
#char 0x808080 0 1 1 0 976 48 16 16 400 0 // Y
#char 0x808080 0 1 1 0 976 32 16 16 400 0 // Z
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // [
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // \
#char 0x000000 0 0 0 0 0 0 1 1 400 420 // ]
#char 0x808080 0 1 1 0 1008 80 16 16 400 0 // ^
#char 0x808080 0 1 1 0 1008 112 16 16 400 0 // _
#char 0x808080 0 1 1 0 992 80 16 16 300 0 // `


#sprite KEY_BUTTON [Cr2mT]
#tex 0x808080 0 3 7 0 160 16 16 16 	// circle
#tex 0x808080 0 3 7 0 176 16 16 16 	// cross
#tex 0x808080 0 3 7 0 192 16 16 16 	// triangle
#tex 0x808080 0 3 7 0 208 16 16 16 	// square
#tex 0x808080 0 3 8 0 800 32 32 32 	// D-pad
#tex 0x808080 0 3 8 0 224 16 24 16 	// L1
#tex 0x808080 0 3 8 0 256 16 24 16 	// R1

#text STRINGS_ROW1					FONT_SMALL [Cr2iT]
"   %02X/WARP ROOM"
"   %02X/TOTALLY BEAR"
"   %02X/TOTALLY FLY"
"   %02X/RIPPER ROO"
"   %02X/KOMODO BROS"
"   %02X/TINY TIGER"
"   %02X/N. GIN"
"   %02X/N. CORTEX"

#text STRINGS_ROW2					FONT_SMALL [Cr2iT]
"   %02X/TURTLE WOODS"
"   %02X/SNOW GO"
"   %02X/HANG EIGHT"
"   %02X/THE PITS"
"   %02X/CRASH DASH"

#text STRINGS_ROW3					FONT_SMALL [Cr2iT]
"   %02X/SNOW BIZ"
"   %02X/AIR CRASH"
"   %02X/BEAR IT"
"   %02X/CRASH CRUSH"
"   %02X/THE EEL DEAL"

#text STRINGS_ROW4					FONT_SMALL [Cr2iT]
"   %02X/PLANT FOOD"
"   %02X/SEWER OR LATER"
"   %02X/BEAR DOWN"
"   %02X/ROAD TO RUIN"
"   %02X/UN-BEARBLE"

#text STRINGS_ROW5					FONT_SMALL [Cr2iT]
"   %02X/HANGIN' OUT"
"   %02X/DIGGIN' IT"
"   %02X/COLD HARD CRASH"
"   %02X/RUINATION"
"   %02X/BEE-HAVING"

#text STRINGS_ROW6					FONT_SMALL [Cr2iT]
"   %02X/PISTON IT AWAY"
"   %02X/ROCK IT"
"   %02X/NIGHT FIGHT"
"   %02X/PACK ATTACK"
"   %02X/SPACED OUT"


#text STRINGS_DEBUG 				FONT_SMALL [Cr2iT]
"   DEBUG >OFF"
"   DEBUG >ON"

#text STRINGS_RANGE_TYPE			FONT_SMALL [Cr2iT]
"   RANGE >%d.%02d-%d.%02d"

#text STRINGS_TYPE					FONT_SMALL [Cr2iT]
"   TYPE  >CUSTOM"
"   TYPE  >RANDOM EACH LEVEL"
"   TYPE  >RANDOM PERIODIC CHANGE"
"   TYPE  >RANDOM NON-PERIODIC CHANGE"
"   TYPE  >RANDOM EACH WUMPA"
"   TYPE  >RANDOM EACH CRATE"
"   TYPE  >RANDOM EACH COLLECTIBLE"
"   TYPE  >RANDOM EACH SPIN"
"   TYPE  >RANDOM EACH WARP ROOM"
"   TYPE  >RANDOM EACH RESPAWN"

#text STRINGS_PERIOD				FONT_SMALL [Cr2iT]
"SET SCALE AND SPEED SEPARATELY,~nANY TIME"
"EACH TIME YOU ENTER A LEVEL,~nSCALE/SPEED ARE RANDOMIZED"
"SCALE/SPEED ARE RANDOMIZED~nEVERY    <%3d >   FRAMES"
"SCALE/SPEED ARE RANDOMIZED~nEVERY 5-75 FRAMES"
"SCALE/SPEED ARE RANDOMIZED~nWHEN A WUMPA IS COLLECTED"
"SCALE/SPEED ARE RANDOMIZED~nWHEN A CRATE IS BROKEN"
"SCALE/SPEED ARE RANDOMIZED~nWHEN A FRUIT/BOX/LIFE OR~nCRYSTAL/GEM IS COLLECTED"
"SCALE/SPEED ARE RANDOMIZED~nEVERY TIME YOU SPIN"
"SCALE/SPEED ARE RANDOMIZED~nEVERY TIME YOU SWITCH WARP ROOMS"
"SCALE/SPEED ARE RANDOMIZED~nEVERY TIME YOU RESPAWN"

#text STRINGS_TEXT 					FONT_SMALL [Cr2iT]
"CRASH 2 SPEED/SCALE MOD"
"HOLD ALL SHOULDER BUTTONS TO RESPAWN AND CHANGE SCALE WHEN STUCK"


#spawn SELECT_ROW1 					Spawn_Select
#spawn SELECT_ROW2 					Spawn_Select
#spawn SELECT_ROW3 					Spawn_Select
#spawn SELECT_ROW4 					Spawn_Select
#spawn SELECT_ROW5 					Spawn_Select
#spawn SELECT_ROW6 					Spawn_Select

#spawn SELECT_DEBUG 				Spawn_Debug

#spawn S_TEXT 						Spawn_Text
#spawn S_TEXT_2						Spawn_Text

#spawn SELECT_TYPE					Spawn_Debug
#spawn SELECT_RANGE_TYPE			Spawn_Debug

#spawn SELECT_T0_INFO				Spawn_Debug
#spawn SELECT_T1_INFO				Spawn_Debug
#spawn SELECT_T2_INFO				Spawn_Debug
#spawn SELECT_T3_INFO				Spawn_Debug
#spawn SELECT_T4_INFO				Spawn_Debug
#spawn SELECT_T5_INFO				Spawn_Debug
#spawn SELECT_T6_INFO				Spawn_Debug
#spawn SELECT_T7_INFO				Spawn_Debug
#spawn SELECT_T8_INFO				Spawn_Debug
#spawn SELECT_T9_INFO				Spawn_Debug

#spawn S_BUTTON						Button_Spawn
#spawn S_BUTTON_2					Button_Spawn

#spawn S_DEBUG_CODE_OBJ				debug_code_obj

var level, Section, ShowDebug

expr ROW_COUNT = 6

state Spawn_Select {
	stateflag 1
	statusc 2
	code () {
		if (spawn == SELECT_ROW1) {			
			GLOBAL_31 = 0;
			set_player_scale(100)
			set_player_speed(100)
			set_miscval(24)
			set_range_type(4)
			set_typeval(0)
			
			GEMPOOL1 = 0
			GEMPOOL2 = 0
			CRYSTALPOOL1 = 0
			CRYSTALPOOL2 = 0
			SAVEDGEMPOOL1 = 0
			SAVEDGEMPOOL2 = 0
			SAVEDCRYSTALPOOL1 = 0
			SAVEDCRYSTALPOOL2 = 0
			spawn2(51, 18) // background
			spawn2(LSe2C, SELECT_ROW2)
			spawn2(LSe2C, SELECT_ROW3)
			spawn2(LSe2C, SELECT_ROW4)
			spawn2(LSe2C, SELECT_ROW5)
			spawn2(LSe2C, SELECT_ROW6)
			
			spawn2(LSe2C, SELECT_DEBUG)
			spawn2(LSe2C, SELECT_TYPE)
			spawn2(LSe2C, SELECT_RANGE_TYPE)
			
			spawn2(LSe2C, SELECT_T0_INFO)
			spawn2(LSe2C, SELECT_T1_INFO)
			spawn2(LSe2C, SELECT_T2_INFO)
			spawn2(LSe2C, SELECT_T3_INFO)
			spawn2(LSe2C, SELECT_T4_INFO)
			spawn2(LSe2C, SELECT_T5_INFO)
			spawn2(LSe2C, SELECT_T6_INFO)
			spawn2(LSe2C, SELECT_T7_INFO)
			spawn2(LSe2C, SELECT_T8_INFO)
			spawn2(LSe2C, SELECT_T9_INFO)
			
			spawn2(LSe2C, S_TEXT)
			spawn2(LSe2C, S_TEXT_2)
			
			spawn2(LSe2C, S_BUTTON_2, 1, 1.0, -210.0, 0)
			
			spawn2(LSe2C, S_BUTTON, 1, 2.0, -210.0, -20.0)
			spawn2(LSe2C, S_BUTTON, 1, 3.0, -210.0, -56.0)
			spawn2(LSe2C, S_BUTTON, 1, 0.0, -210.0, -38.0)
			spawn2(LSe2C, S_BUTTON, 1, 5.0, -113.0, -90.0)
			spawn2(LSe2C, S_BUTTON, 1, 6.0,   23.0, -90.0)
			
			spawn2(LSe2C, S_DEBUG_CODE_OBJ)
		}
		statusb =  0x40000
		vfx = (vfx & -0x100) | 6
		zindex = 235
		x = -0xE700
		y = 0x3000
		z = 0
		set_text_scale(0.9)
		var curr = 0
		var choice_count = 5
		Section = 0

		do {
			var temp = 0
			if (spawn == SELECT_ROW1) {
				y = 0x6000
				choice_count = 8
				setanim(STRINGS_ROW1)
				TextColor_disabled()

				if (curr == 0)
					temp = 0x02;
				if (curr == 1)
					temp = 0x25;
				if (curr == 2)
					temp = 0x27;
				if (curr == 3)
					temp = 0x06;
				if (curr == 4)
					temp = 0x08;
				if (curr == 5)
					temp = 0x03;
				if (curr == 6)
					temp = 0x09;
				if (curr == 7)
					temp = 0x07;

				if (Section == 0) {
					TextColor2_enabled(true)
					if (dirpress(PAD_W)) {
						curr = (curr + choice_count - 1) % choice_count
						SoundSelect()
					}
					else if (dirpress(PAD_E)) {
						curr = (curr + 1) % choice_count
						SoundSelect()
					}
					level = temp << 8;
					changestateif(State_2, buttonpress(PAD_X | PAD_START))
				}

				if (dirpress(PAD_N)) {
					Section = (Section + ROW_COUNT - 1) % ROW_COUNT
					SoundSelect()
				}
				else if (dirpress(PAD_S)) {
					Section = (Section + 1) % ROW_COUNT
					SoundSelect()
				}
			}
			else if (spawn == SELECT_ROW2) {
				y = 0x5000
				choice_count = 5
				setanim(STRINGS_ROW2)
				TextColor_disabled()

				if (curr == 0)
					temp = 0x1E;
				if (curr == 1)
					temp = 0x0E;
				if (curr == 2)
					temp = 0x19;
				if (curr == 3)
					temp = 0x1F;
				if (curr == 4)
					temp = 0x18;

				if (parent->Section == 1) {
					TextColor2_enabled(true)
					if (dirpress(PAD_W)) {
						curr = (curr + choice_count - 1) % choice_count
						SoundSelect()
					}
					else if (dirpress(PAD_E)) {
						curr = (curr + 1) % choice_count
						SoundSelect()
					}
					level = temp << 8;
					changestateif(State_2, buttonpress(PAD_X | PAD_START))
				}
			}
			else if (spawn == SELECT_ROW3) {
				y = 0x4000
				choice_count = 5
				setanim(STRINGS_ROW3)
				TextColor_disabled()

				if (curr == 0)
					temp = 0x11;
				if (curr == 1)
					temp = 0x20;
				if (curr == 2)
					temp = 0x1D;
				if (curr == 3)
					temp = 0x1B;
				if (curr == 4)
					temp = 0x23;

				if (parent->Section == 2) {
					TextColor2_enabled(true)
					if (dirpress(PAD_W)) {
						curr = (curr + choice_count - 1) % choice_count
						SoundSelect()
					}
					else if (dirpress(PAD_E)) {
						curr = (curr + 1) % choice_count
						SoundSelect()
					}
					level = temp << 8;
					changestateif(State_2, buttonpress(PAD_X | PAD_START))
				}
			}
			else if (spawn == SELECT_ROW4) {
				y = 0x3000
				choice_count = 5
				setanim(STRINGS_ROW4)
				TextColor_disabled()

				if (curr == 0)
					temp = 0x21;
				if (curr == 1)
					temp = 0x0A;
				if (curr == 2)
					temp = 0x22;
				if (curr == 3)
					temp = 0x16;
				if (curr == 4)
					temp = 0x17;

				if (parent->Section == 3) {
					TextColor2_enabled(true)
					if (dirpress(PAD_W)) {
						curr = (curr + choice_count - 1) % choice_count
						SoundSelect()
					}
					else if (dirpress(PAD_E)) {
						curr = (curr + 1) % choice_count
						SoundSelect()
					}
					level = temp << 8;
					changestateif(State_2, buttonpress(PAD_X | PAD_START))
				}
			}
			else if (spawn == SELECT_ROW5) {
				y = 0x2000
				choice_count = 5
				setanim(STRINGS_ROW5)
				TextColor_disabled()

				if (curr == 0)
					temp = 0x0D;
				if (curr == 1)
					temp = 0x15;
				if (curr == 2)
					temp = 0x13;
				if (curr == 3)
					temp = 0x0F;
				if (curr == 4)
					temp = 0x24;

				if (parent->Section == 4) {
					TextColor2_enabled(true)
					if (dirpress(PAD_W)) {
						curr = (curr + choice_count - 1) % choice_count
						SoundSelect()
					}
					else if (dirpress(PAD_E)) {
						curr = (curr + 1) % choice_count
						SoundSelect()
					}
					level = temp << 8;
					changestateif(State_2, buttonpress(PAD_X | PAD_START))
				}
			}
			else if (spawn == SELECT_ROW6) {
				y = 0x1000
				choice_count = 5
				setanim(STRINGS_ROW6)
				TextColor_disabled()

				if (curr == 0)
					temp = 0x10;
				if (curr == 1)
					temp = 0x12;
				if (curr == 2)
					temp = 0x0C;
				if (curr == 3)
					temp = 0x1A;
				if (curr == 4)
					temp = 0x26;

				if (parent->Section == 5) {
					TextColor2_enabled(true)
					if (dirpress(PAD_W)) {
						curr = (curr + choice_count - 1) % choice_count
						SoundSelect()
					}
					else if (dirpress(PAD_E)) {
						curr = (curr + 1) % choice_count
						SoundSelect()
					}
					level = temp << 8;
					changestateif(State_2, buttonpress(PAD_X | PAD_START))
				}
			}
			playframe(curr * 1.0)
		} while (1)
	}
}

state State_2  {
	code () {
		var type = GET_TYPE
		if (type == TYPE_RANDOM_EVERY_WARP) {								
			set_miscval(0)
		}
		soundpitch(4.0)
		sounddecay(0xF0)
		soundplay([tal0A], 0.8V)
		GLOBAL_106 = -1.0
		animseq = 0
		while (GLOBAL_106 != -1) {
			playframe(0)
		}
		GLOBAL_4 = GLOBAL_4 & -0x40001
		GLOBAL_17 = 0
		GLOBAL_131 = 0
		GLOBAL_20 = 0x63
		// REPLACED MANUALLY CUZ IDK HOW TO GET MISC(mem1, player, 9, 12)
		loadlevel(level)
	}
}

expr X_INFO = 0x1800
expr Y_INFO = -0x2600

state Spawn_Debug {
	stateflag 1
	statusc 2
	code () {
		statusb = 0x40000
		vfx = (vfx & -0x100) | 6
		zindex = 235
		x = -0xE000
		y = -0x1C00
		z = 0
		set_text_scale(0.8)
		SetTextColor(0x146, 0x190, 0x1FF, 0, 0, 0x1FF);
		
		if (spawn == SELECT_DEBUG) {
			y += 0x1000
			setanim(STRINGS_DEBUG)
			var was_visible = 0
			do () {
				var curr = GLOBAL_68
				if (was_visible) {
					if (buttonpress(PAD_TRIANGLE) && curr == 0) {
						GLOBAL_68 = true
						SoundSelect()
						playframe()
					}
					else if (buttonpress(PAD_TRIANGLE) && curr == 1.0) {
						GLOBAL_68 = false
						SoundSelect()
						playframe()
					}
				}
			
				if (GLOBAL_68)
					was_visible = 1;
				
				if (was_visible)
					statusb &= ~FLAG_INVISIBLE;
				else 
					statusb |= FLAG_INVISIBLE;
				playframe(curr)
			} while (1)
		} 
		else if (spawn == SELECT_TYPE) {
			y += -0x1400
			setanim(STRINGS_TYPE)
			do {
				var type = GET_TYPE
				if (buttonpress(PAD_SQUARE)) {
					type = (type + 1) % TYPE_COUNT
					SoundSelect()
					set_typeval(type)					
				}
				playframe(type << 8)
			} while (1)
		} else if (spawn == SELECT_RANGE_TYPE) {
			y += -0x200					
			setanim(STRINGS_RANGE_TYPE)
			do {
				var t = GET_TYPE
				var type = GET_RANGE_TYPE		
				if (t) {
					SetTextColor(0x146, 0x190, 0x1FF, 0, 0, 0x1FF);									
				} else {
					TextColor_disabled()
				}
				if (buttonpress(PAD_CIRCLE)) {
					type = (type + 1) % RANGE_TYPE_COUNT
					SoundSelect()
					set_range_type(type)
				}
				get_rnd_scale_max_from_type(type) 
				var max = misc % 100
				var max2 = misc / 100
				get_rnd_scale_min_from_type(type)
				var min = misc % 100
				var min2 = misc / 100				
				playframe(0)
				 
			} while(1)
		}
		else if (spawn == SELECT_T0_INFO || 
				 spawn == SELECT_T1_INFO || 
				 spawn == SELECT_T3_INFO || 
				 spawn == SELECT_T4_INFO ||
				 spawn == SELECT_T5_INFO ||
				 spawn == SELECT_T6_INFO || 
				 spawn == SELECT_T7_INFO || 
				 spawn == SELECT_T8_INFO || 
				 spawn == SELECT_T9_INFO
				) 
		{
			var t = spawn - SELECT_T0_INFO		
			x += X_INFO
			y += Y_INFO
			setanim(STRINGS_PERIOD)
			SetTextColor(0x30, 0x30, 0x194, 0x40, 0x46, 0x80)

			do {
				var type = GET_TYPE
				if (type == t) {
					statusb &= ~FLAG_INVISIBLE					
				} else {
					statusb |= FLAG_INVISIBLE
				}
			
				playframe(t << 8)
			} while (1)
		} 
		else if (spawn == SELECT_T2_INFO) {
			x += X_INFO
			y += Y_INFO
			setanim(STRINGS_PERIOD)
			SetTextColor(0x30, 0x30, 0x194, 0x40, 0x46, 0x80)

			do {
				var type = GET_TYPE
				var period = GET_MISCVAL
				if (type == TYPE_RANDOM_CHANGING) {
					statusb &= ~FLAG_INVISIBLE
					if (buttonhold(PAD_L1) && period > PERIOD_MIN) {
						period -= 2
					} else if (buttonhold(PAD_R1) && period < PERIOD_MAX) {
						period += 2
					}
				} else {
					statusb |= FLAG_INVISIBLE
				}
				set_miscval(period)
				playframe(type << 8)
			} while (1)
		}
	}
}

state Spawn_Text {
	stateflag 1
	statusc 2
	code () {
		statusb = 0x40400
		vfx = (vfx & -0x100) | 6
		zindex = 235
		x = 0
		y = 0x7800
		set_text_scale()
		z = 0
		setanim(STRINGS_TEXT)		
		SetTextColor(0x1FF, 0x170, 0, 0x1FF, 0, 0)
		
		if (spawn == S_TEXT_2) {
			x = -0xE000
			y = -115.0;
			statusb = 0x40000
			set_text_scale(0.45)
			sleepframe(1.0);
		}
		
		SetTextColor(0x146, 0x190, 0x1FF, 0, 0, 0x1FF)
		sleepframe(0);		
	}
}



state Button_Spawn {
	code (t, nx, ny) {
		statusb = 0x40000
		vfx = (vfx & -0x100) | 6
		zindex = 128
		x = nx
		y = ny
		z = 0
		setanim(KEY_BUTTON);
		var was_visible = 0
		if (spawn == S_BUTTON_2) {
			SetScale(0.85)
			do {
				y = 0x5700 - parent->Section * 0x1000
				playframe(1.0)
			} while (1)
		}
	
		if (t == 2.0) {
			SetScale(0.85)
			do {
				if (GLOBAL_68)
					was_visible = 1;
				
				if (was_visible)
					statusb &= ~FLAG_INVISIBLE;
				else 
					statusb |= FLAG_INVISIBLE;
				
				playframe(t)
			} while (1)
		}
		
		if (t <= 3.0) {
			SetScale(0.85);
			sleepframe(t);
		}	
		if (t == 5.0 || t == 6.0) {
			SetScale(1.2, 0.8, 0.9)
			do {
				var type = GET_TYPE
				if (type == TYPE_RANDOM_CHANGING) {
					statusb &= ~FLAG_INVISIBLE					
				} else {
					statusb |= FLAG_INVISIBLE
				}
				playframe(t)
			} while (1)
		}
	}
}


/*
expr PAD_L2       = 0x0001
expr PAD_R2       = 0x0002
expr PAD_L1       = 0x0004
expr PAD_R1       = 0x0008
expr PAD_TRIANGLE = 0x0010
expr PAD_CIRCLE   = 0x0020
expr PAD_X        = 0x0040
expr PAD_SQUARE   = 0x0080
expr PAD_SELECT   = 0x0100
expr PAD_L3       = 0x0200
expr PAD_R3       = 0x0400
expr PAD_START    = 0x0800
expr PAD_DUP      = 0x1000
expr PAD_DRIGHT   = 0x2000
expr PAD_DDOWN    = 0x4000
expr PAD_DLEFT    = 0x8000
*/

/*UP UP DOWN DOWN LEFT RIGHT LEFT RIGHT SQUARE*/

state debug_code_obj {
	code () {
		var in_state = 0
		animseq = 0
		vfx = (vfx & -0x100) | 6
		x = 224.0
		y = 120.0
		z = 0
		SetTextColor(0x1FF, 0x1FF, 0x1FF, 0x1FF, 0x1FF, 0x1FF)
		SetScale(0.95S/24, 0.87S/24, 1.0S)
		statusb = 0
		if (!DEBUG) {
			statusb = FLAG_INVISIBLE 
		}
		
		do {
			var temp = in_state
			playframe(2.0)
			
			if (in_state == 0) {
				if (dirpress(PAD_UP))
					in_state = 1;
			}
			else if (in_state == 1) {
				if (dirpress(PAD_UP))
					in_state = 2;
				else if (dirpress(PAD_LEFT) || dirpress(PAD_RIGHT) || dirpress(PAD_DOWN) || buttonpress(0xFFF))
					in_state = 0;
			} 
			else if (in_state == 2) {
				if (dirpress(PAD_DOWN))
					in_state = 3;
				else if (dirpress(PAD_UP)) 
					in_state = 2;
				else if (dirpress(PAD_LEFT) || dirpress(PAD_RIGHT) || buttonpress(0xFFF))
					in_state = 0;
			} 
			else if (in_state == 3) {
				if (dirpress(PAD_DOWN))
					in_state = 4;
				else if (dirpress(PAD_UP))
					in_state = 1;
				else if (dirpress(PAD_LEFT) || dirpress(PAD_RIGHT) || buttonpress(0xFFF))
					in_state = 0;
			} 
			else if (in_state == 4) {
				if (dirpress(PAD_LEFT))
					in_state = 5;
				else if (dirpress(PAD_UP)) 
					in_state = 1;
				else if (dirpress(PAD_DOWN) || dirpress(PAD_RIGHT) || buttonpress(0xFFF))
					in_state = 0;
			} 
			else if (in_state == 5) {
				if (dirpress(PAD_RIGHT))
					in_state = 6;
				else if (dirpress(PAD_UP)) 
					in_state = 1;
				else if (dirpress(PAD_LEFT) || dirpress(PAD_DOWN)  || buttonpress(0xFFF))
					in_state = 0;
			} 
			else if (in_state == 6) {
				if (dirpress(PAD_LEFT))
					in_state = 7;
				else if (dirpress(PAD_UP)) 
					in_state = 1;
				else if (dirpress(PAD_RIGHT) || dirpress(PAD_DOWN) || buttonpress(0xFFF))
					in_state = 0;
			} 
			else if (in_state == 7) {
				if (dirpress(PAD_RIGHT))
					in_state = 8;
				else if (dirpress(PAD_UP)) 
					in_state = 1;
				else if (dirpress(PAD_LEFT) || dirpress(PAD_DOWN) || buttonpress(0xFFF))
					in_state = 0;
			} 
			else if (in_state == 8) {
				if (buttonpress(PAD_SQUARE)) {
					DEBUG = true
					sleepnull()
				} 
				else if (dirpress(PAD_UP)) 
					in_state = 1;
				else if (dirpress(PAD_LEFT) || dirpress(PAD_RIGHT) || dirpress(PAD_DOWN) || buttonpress(0xFFF))
					in_state = 0;
			}
		} while (1)
	}
}
